"""
Piper Morgan Web Interface
Simple FastAPI app for interacting with workflows
"""
import asyncio
import os
from typing import Dict, Any, Optional
from dataclasses import dataclass
from enum import Enum
from uuid import uuid4
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse

# Load environment
with open('../.env', 'r') as f:
    for line in f:
        if line.strip() and not line.startswith('#') and '=' in line:
            key, value = line.strip().split('=', 1)
            os.environ[key] = value

from github import Github

# Working models (same as our proven test)
class IntentCategory(Enum):
    EXECUTION = 'execution'

class WorkflowType(Enum):
    CREATE_TICKET = 'create_ticket'

class WorkflowStatus(Enum):
    PENDING = 'pending'
    RUNNING = 'running'
    COMPLETED = 'completed'
    FAILED = 'failed'

@dataclass
class Intent:
    category: IntentCategory
    action: str
    context: Dict[str, Any]
    id: str = None
    
    def __post_init__(self):
        if not self.id:
            self.id = str(uuid4())

@dataclass 
class Workflow:
    type: WorkflowType
    context: Dict[str, Any]
    status: WorkflowStatus = WorkflowStatus.PENDING
    id: str = None
    result: Optional[Dict] = None
    
    def __post_init__(self):
        if not self.id:
            self.id = str(uuid4())

# Proven GitHub agent
class GitHubAgent:
    def __init__(self):
        token = os.getenv('GITHUB_TOKEN')
        self.client = Github(token)
        
    async def create_issue(self, repo_name: str, title: str, body: str, labels=None):
        try:
            repo = self.client.get_repo(repo_name)
            issue = repo.create_issue(title=title, body=body, labels=labels or [])
            return {
                'success': True,
                'issue': {
                    'id': issue.id,
                    'number': issue.number,
                    'title': issue.title,
                    'url': issue.html_url,
                    'state': issue.state
                }
            }
        except Exception as e:
            return {'success': False, 'error': str(e)}

# Proven factory and executor
class WorkflowFactory:
    async def create_from_intent(self, intent: Intent) -> Optional[Workflow]:
        if intent.action == 'create_github_issue':
            return Workflow(type=WorkflowType.CREATE_TICKET, context=intent.context)
        return None

class WorkflowExecutor:
    def __init__(self):
        self.github_agent = GitHubAgent()
    
    async def execute_workflow(self, workflow: Workflow):
        workflow.status = WorkflowStatus.RUNNING
        
        if workflow.type == WorkflowType.CREATE_TICKET:
            description = workflow.context.get('description', 'No description')
            repo = workflow.context.get('repository', 'mediajunkie/piper-morgan-platform')
            
            title = f'[Piper Morgan] {description[:50]}' + ('...' if len(description) > 50 else '')
            
            body = f"""## Description
{description}

## Context
- Created via: Piper Morgan Web Interface
- Workflow ID: {workflow.id}

---
*Generated by Piper Morgan AI Assistant*"""
            
            result = await self.github_agent.create_issue(
                repo_name=repo, title=title, body=body, labels=['piper-morgan']
            )
            
            workflow.status = WorkflowStatus.COMPLETED if result['success'] else WorkflowStatus.FAILED
            workflow.result = result
            return result
        
        workflow.status = WorkflowStatus.FAILED
        return {'success': False, 'error': 'Unknown workflow type'}

# Create FastAPI app
app = FastAPI(title='Piper Morgan', description='AI Product Management Assistant')

# In-memory storage for demo
workflows = {}
executor = WorkflowExecutor()
factory = WorkflowFactory()

@app.get('/', response_class=HTMLResponse)
async def home(request: Request):
    return """<!DOCTYPE html>
<html>
<head>
    <title>Piper Morgan - AI PM Assistant</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; border-radius: 10px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #2c3e50; margin: 0; font-size: 2.5em; }
        .header p { color: #7f8c8d; font-size: 1.2em; margin: 10px 0; }
        .chat-form { margin-bottom: 20px; }
        .chat-input { width: 100%; padding: 15px; border: 2px solid #ecf0f1; border-radius: 8px; font-size: 16px; box-sizing: border-box; }
        .chat-input:focus { outline: none; border-color: #3498db; }
        .submit-btn { background: #3498db; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin-top: 10px; }
        .submit-btn:hover { background: #2980b9; }
        .result { margin-top: 20px; padding: 20px; border-radius: 8px; }
        .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
        .error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
        .workflow-status { margin: 20px 0; padding: 15px; background: #e8f4f8; border-radius: 8px; }
        .examples { margin-top: 30px; }
        .example { padding: 10px; margin: 5px 0; background: #f8f9fa; border-left: 4px solid #3498db; cursor: pointer; }
        .example:hover { background: #e9ecef; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Piper Morgan</h1>
            <p>AI Product Management Assistant</p>
            <p><em>Tell me what you need, and I'll create GitHub issues for you!</em></p>
        </div>
        
        <form class="chat-form" id="chatForm">
            <input type="text" name="message" class="chat-input" 
                   placeholder="e.g., Users are complaining about the login page being slow..." 
                   required>
            <br>
            <button type="submit" class="submit-btn">Create Issue</button>
        </form>
        
        <div id="result"></div>
        
        <div class="examples">
            <h3>üí° Try these examples:</h3>
            <div class="example" onclick="setExample(this)">
                Users are complaining that the mobile app crashes when they upload large photos
            </div>
            <div class="example" onclick="setExample(this)">
                The login page is too slow and users are getting frustrated
            </div>
            <div class="example" onclick="setExample(this)">
                We need to add dark mode support to improve user experience
            </div>
        </div>
    </div>
    
    <script>
        function setExample(element) {
            document.querySelector('.chat-input').value = element.textContent.trim();
        }
        
        document.getElementById('chatForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const message = formData.get('message');
            const resultDiv = document.getElementById('result');
            
            resultDiv.innerHTML = '<div class="workflow-status">üîÑ Processing your request...</div>';
            
            try {
                const response = await fetch('/create-issue', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams(formData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    resultDiv.innerHTML = `
                        <div class="result success">
                            <h3>‚úÖ GitHub Issue Created!</h3>
                            <p><strong>Issue #${result.issue.number}:</strong> ${result.issue.title}</p>
                            <p><strong>URL:</strong> <a href="${result.issue.url}" target="_blank">${result.issue.url}</a></p>
                            <p><strong>Workflow ID:</strong> ${result.workflow_id}</p>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="result error">
                            <h3>‚ùå Error</h3>
                            <p>${result.error}</p>
                        </div>
                    `;
                }
            } catch (error) {
                resultDiv.innerHTML = `
                    <div class="result error">
                        <h3>‚ùå Network Error</h3>
                        <p>Could not connect to server: ${error.message}</p>
                    </div>
                `;
            }
        });
    </script>
</body>
</html>"""

@app.post('/create-issue')
async def create_issue(message: str = Form(...)):
    try:
        intent = Intent(
            category=IntentCategory.EXECUTION,
            action='create_github_issue',
            context={
                'description': message,
                'repository': 'mediajunkie/piper-morgan-platform'
            }
        )
        
        workflow = await factory.create_from_intent(intent)
        if not workflow:
            return JSONResponse({'success': False, 'error': 'Could not create workflow'})
        
        workflows[workflow.id] = workflow
        result = await executor.execute_workflow(workflow)
        
        if result['success']:
            return JSONResponse({
                'success': True,
                'workflow_id': workflow.id,
                'issue': result['issue']
            })
        else:
            return JSONResponse({'success': False, 'error': result['error']})
            
    except Exception as e:
        return JSONResponse({'success': False, 'error': str(e)})

if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host='0.0.0.0', port=8000)
